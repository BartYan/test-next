import Head from 'next/head';
import Image from 'next/image';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import { useState, useEffect } from 'react';

const inter = Inter({ subsets: ['latin'] });

export default function Home() {
  const [predictChord, setPredictChord] = useState();

  async function GetImage() {
    console.log('yo2');
    try {
      const response = await fetch('http://localhost:8000/index?name=Bart', {
        // mode: 'no-cors',
        method: 'get',
      });
      const data = await response.text();

      if (data) {
        const json = JSON.parse(data);
        console.log('newjson', json);
      } else {
        console.error('Odpowiedź sieciowa nie zawiera danych.');
      }
    } catch (err) {
      console.error('Błąd pobierania danych:', err);
    }
  }

  GetImage();

  async function getPredict() {
    console.log('yo getPredict');
    try {
      const response = await fetch(
        'http://localhost:8000/getpredict?coors=0.5832604169845581,0.8792206645011902,-3.999200259841018e-07,0.0,0.6288155913352966,0.854025661945343,0.025876091793179512,0.0,0.6658138632774353,0.8057206869125366,0.02948438934981823,0.0,0.6787540912628174,0.7332387566566467,0.027764927595853806,0.0,0.6726076602935791,0.6829049587249756,0.025506196543574333,0.0,0.7011682987213135,0.8067655563354492,-0.004975150339305401,0.0,0.7152688503265381,0.6792581081390381,-0.010388839058578014,0.0,0.6941640377044678,0.6632382869720459,-0.0035027447156608105,0.0,0.6827796697616577,0.6892639398574829,0.004106671083718538,0.0,0.6885053515434265,0.8046397566795349,-0.022723045200109482,0.0,0.6995010375976562,0.6527712345123291,-0.030067196115851402,0.0,0.6720864176750183,0.6492294669151306,-0.017602061852812767,0.0,0.6642061471939087,0.6839784979820251,-0.005800939630717039,0.0,0.6680094003677368,0.7908855676651001,-0.03747957944869995,0.0,0.6818369030952454,0.6411173343658447,-0.04208211600780487,0.0,0.6532726287841797,0.6477537751197815,-0.022938719019293785,0.0,0.6437857747077942,0.689441442489624,-0.007903148420155048,0.0,0.639646053314209,0.7781006097793579,-0.0497405044734478,0.0,0.6496881246566772,0.6573780179023743,-0.050452884286642075,0.0,0.6293652057647705,0.6656556129455566,-0.035473402589559555,0.0,0.6199742555618286,0.7110483646392822,-0.0230907890945673,0.0',
        {
          // mode: 'no-cors',
          method: 'get',
        }
      );
      const data = await response.text();

      if (data) {
        const json = JSON.parse(data);
        console.log('newjson', json);
      } else {
        console.error('Odpowiedź sieciowa nie zawiera danych.');
      }
    } catch (err) {
      console.error('Błąd pobierania danych:', err);
    }
  }

  getPredict();

  const data4 = {
    data: {
      coors:
        '0.5832604169845581,0.8792206645011902,-3.999200259841018e-07,0.0,0.6288155913352966,0.854025661945343,0.025876091793179512,0.0,0.6658138632774353,0.8057206869125366,0.02948438934981823,0.0,0.6787540912628174,0.7332387566566467,0.027764927595853806,0.0,0.6726076602935791,0.6829049587249756,0.025506196543574333,0.0,0.7011682987213135,0.8067655563354492,-0.004975150339305401,0.0,0.7152688503265381,0.6792581081390381,-0.010388839058578014,0.0,0.6941640377044678,0.6632382869720459,-0.0035027447156608105,0.0,0.6827796697616577,0.6892639398574829,0.004106671083718538,0.0,0.6885053515434265,0.8046397566795349,-0.022723045200109482,0.0,0.6995010375976562,0.6527712345123291,-0.030067196115851402,0.0,0.6720864176750183,0.6492294669151306,-0.017602061852812767,0.0,0.6642061471939087,0.6839784979820251,-0.005800939630717039,0.0,0.6680094003677368,0.7908855676651001,-0.03747957944869995,0.0,0.6818369030952454,0.6411173343658447,-0.04208211600780487,0.0,0.6532726287841797,0.6477537751197815,-0.022938719019293785,0.0,0.6437857747077942,0.689441442489624,-0.007903148420155048,0.0,0.639646053314209,0.7781006097793579,-0.0497405044734478,0.0,0.6496881246566772,0.6573780179023743,-0.050452884286642075,0.0,0.6293652057647705,0.6656556129455566,-0.035473402589559555,0.0,0.6199742555618286,0.7110483646392822,-0.0230907890945673,0.0',
    },
  };

  useEffect(() => {
    async function fetchData2(data) {
      const url = 'http://localhost:8000/api/predict';

      try {
        const response = await fetch(url, {
          method: 'POST',
          mode: 'cors',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        if (!response.ok) {
          throw new Error('HTTP error! Status: ' + response.status);
        }

        const responseData = await response.json();
        setPredictChord(responseData);
        console.log('responseData4', responseData);
      } catch (e) {
        console.log('catch', e);
      }
    }
    fetchData2(data4);
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <meta name='viewport' content='width=device-width, initial-scale=1' />
        <link rel='icon' href='/favicon.ico' />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <p>
            Get started by editing&nbsp;
            <code className={styles.code}>pages/index.js</code>
          </p>
          <div>
            <a
              href='https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
              target='_blank'
              rel='noopener noreferrer'
            >
              By{' '}
              <Image
                src='/vercel.svg'
                alt='Vercel Logo'
                className={styles.vercelLogo}
                width={100}
                height={24}
                priority
              />
            </a>

            {predictChord ? (
              <div>{predictChord}</div>
            ) : (
              <div>Loading chords...</div>
            )}
          </div>
        </div>

        <div className={styles.center}>
          <Image
            className={styles.logo}
            src='/next.svg'
            alt='Next.js Logo'
            width={180}
            height={37}
            priority
          />
        </div>

        <div className={styles.grid}>
          <a
            href='https://nextjs.org/docs?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            className={styles.card}
            target='_blank'
            rel='noopener noreferrer'
          >
            <h2>
              Docs <span>-&gt;</span>
            </h2>
            <p>
              Find in-depth information about Next.js features and&nbsp;API.
            </p>
          </a>

          <a
            href='https://nextjs.org/learn?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            className={styles.card}
            target='_blank'
            rel='noopener noreferrer'
          >
            <h2>
              Learn <span>-&gt;</span>
            </h2>
            <p>
              Learn about Next.js in an interactive course with&nbsp;quizzes!
            </p>
          </a>

          <a
            href='https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            className={styles.card}
            target='_blank'
            rel='noopener noreferrer'
          >
            <h2>
              Templates <span>-&gt;</span>
            </h2>
            <p>
              Discover and deploy boilerplate example Next.js&nbsp;projects.
            </p>
          </a>

          <a
            href='https://vercel.com/new?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app'
            className={styles.card}
            target='_blank'
            rel='noopener noreferrer'
          >
            <h2>
              Deploy <span>-&gt;</span>
            </h2>
            <p>
              Instantly deploy your Next.js site to a shareable URL
              with&nbsp;Vercel.
            </p>
          </a>
        </div>
      </main>
    </>
  );
}
